import bot_messages
from bot_messages import dayArray, dayCompareArray, startMessage, getGroupSelectedMessage
import database as db
from database import User
import pair_manager as pm
import config
from printer import PrintEx


from threading import Thread
import numpy as np
import telebot
from telebot import types
from random import randrange
from datetime import date, timedelta
from datetime import datetime
import pytz as pytz


bot = bot_messages.bot
def cycleThread():
    while(True):
        try: bot_messages.bot.polling(none_stop = True)
        except: pass

# 
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ callback'–æ–≤:
# 'button_callback_'    - –ø–æ–º–µ—Ç–∫–∞ —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∏;
# 'callback_name_'      - –∏–º—è –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 'set_student_';
# 'callback_from_'      - –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª callback, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –Ω–∞–∑–∞–¥
# 'callback_origin'     - –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª callback, –≤ –±–æ–ª—å—à–µ–º –º–∞—Å—à—Ç–∞–±–µ
#
# ------------------------
#
# P.s. –∑–∞–º–µ–Ω—è—Ç—å –¥–ª—è 'callback_from' –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π 'button_callback_' –Ω–∞ 'callback_from_',
# —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ –∏—Ç–æ–≥—É: 
# button_callback_ + callback_name_ + callback_from_ + [callback_from_name_ + callback_origin_ + [callback_origin_name]]
#
# –ø—Ä–∏–º–µ—Ä: 'button_callback_set_student_callback_from_set_teacher'
#                                                    ^^^^^^^^^^^
#                             –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ - 'button_callback_set_teacher'
#
# ------------------------
#
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ —Ç–∏–ø—É: 
#       (func=lambda call: 'button_callback_callback_name' in call.data)
# –∑–∞–º–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å 'button_callback_callback_name' –Ω–∞ 'callback_from_callback_name'
# –Ω—É–∂–Ω–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥—Ä—É–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –ª–æ–∂–Ω–æ.
# ... + [callback_from_name_ + [callback_origin_ + callback_origin_name]]
# 
# —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å "–∏—Å—Ç–æ—Ä–∏—é", –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º, –∫–∞–∫ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –µ–µ?
# –¢.–µ. –∏–º–µ—Ç—å —Å–≤—è–∑—å –ø–æ —Ç–∏–ø—É: "button_callback_ + callback_name_ + callback_from_ + callback_name_ + callback_from_ ..." - –∞–±—Å—É—Ä–¥
# 
# –î–ª—è —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥":
# 1) –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–∞–¥ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ - –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∫–ª–∞–¥–∫—É
# 2) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É - —Ç.–µ. –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª: /start -> —è —Å—Ç—É–¥–µ–Ω—Ç -> 3 –∫—É—Ä—Å -> –ù–ê–ó–ê–î
# —Ç–æ–≥–¥–∞ –µ–≥–æ –≤–µ—Ä–Ω–µ—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫—É "—è —Å—Ç—É–¥–µ–Ω—Ç" –∏ —Ç–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –ø—É—Ç–∏: /start -> —è —Å—Ç—É–¥–µ–Ω—Ç -> –ù–ê–ó–ê–î
# —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –µ–≥–æ –≤–µ—Ä–Ω–µ—Ç –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ - –≤ –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏ - –Ω–∞ –≤–∫–ª–∞–¥–∫—É "/start" (–∏–∑ –∏–º–µ–Ω–∏ callback_origin_ + callback_origin_name)
# 
# ------------------------
# 
# 'callback_origin' –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–ª–µ–µ –º–∞—Å—à—Ç–∞–±–Ω–æ;
# –¢.–µ. –≤—ã–∑–æ–≤ –±—ã–ª –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è / –ø–æ–º–æ—â–∏ / —Å—Ç–∞—Ä—Ç–∞
#
#
#

btnCallbackPrefix = 'b_cb_'

# prefixes:
# s - set
# g - get
# f - find
# c - change
# m - main page / root page

def HistoryCutTo(callHistory : str, page : str):
    pageData = page.replace(btnCallbackPrefix, '')
    data = callHistory.split('/')
    index = 0
    for i in reversed(range(len(data))):
        if (pageData in data[i]):
            index = i + 1
            break
    result = btnCallbackPrefix + '/'.join(str(i) for i in data[index:])
    return result

def HistoryGenerate(callHistory : str, nextPage : str): 
    callHistory = HistoryCutTo(callHistory, nextPage)
    result = f"{btnCallbackPrefix}{nextPage}/{callHistory.replace(btnCallbackPrefix, '')}"
    if (len(result) >= 59):
        print(f"Expecting error by calldata lenght, current: {len(result)}, max: 60. \t {result}")
    return result

def HistoryGenerateWithReset(nextPage : str): 
    result = f"{btnCallbackPrefix}{HistoryCurrentPage(nextPage)}"
    if (len(result) >= 59):
        print(f"Expecting error by calldata lenght, current: {len(result)}, max: 60. \t {result}")
    return result

def HistoryPrevPage(callHistory : str):
    data = callHistory.split('/', 1)
    if (len(data) <= 1 or data[1] == None): 
        return callHistory
    return f"{btnCallbackPrefix}{''.join(data[1:])}"

def HistoryCurrentPage(callHistory : str):
    data = callHistory.split('/', 1)
    return data[0]

def HistoryIsInTop(callHistory : str, page : str):
    parsed = HistoryCurrentPage(callHistory) 
   
    v = f'{btnCallbackPrefix}{page}' in parsed
    if (v and config.IsBotInDebug()): 
        print(f'{HistoryCurrentPage(HistoryPrevPage(callHistory))}\t\t->\t{page}')
    return v

def HistoryReplaceLastPage(callHistory : str, nextPage : str): 
    return HistoryGenerate(HistoryPrevPage(callHistory), nextPage)

def GetSettingsPageContent(message):
    callHistory = 'm_settings'
        
    markup_inline = types.InlineKeyboardMarkup()

    user = db.GetUserById(message.chat.id)
    if (user == None): 
        item1 = types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å', callback_data=HistoryGenerate(callHistory, 'c_role'))
        markup_inline.add(item1)
        return markup_inline
    
    isUserStudent = user.IsStudent()
    if (user.UserValidAuto()): changeText = '–°–º–µ–Ω–∏—Ç—å'
    else: changeText = '–í—ã–±—Ä–∞—Ç—å'
    item1 = types.InlineKeyboardButton(f'{changeText} —Ä–æ–ª—å', callback_data=HistoryGenerate(callHistory, 'c_role'))
    
    if (isUserStudent): 
        item2 = types.InlineKeyboardButton(f'{changeText} –≥—Ä—É–ø–ø—É', callback_data=HistoryGenerate(callHistory, 'c_group'))
    else: 
        item2 = types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –§–ò–û', callback_data=HistoryGenerate(callHistory, 'c_name'))
    markup_inline.add(item1, item2)
    
    item3 = types.InlineKeyboardButton('–ê–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data=HistoryGenerate(callHistory, 'c_spam'))
    markup_inline.add(item3)
    
    if (user.UserValidAuto()):
        item4 = types.InlineKeyboardButton(text = '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', callback_data=HistoryGenerateWithReset('m_timetable'))
        markup_inline.add(item4)

    return markup_inline


@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data, 'm_settings'))
def handle_button_pressed(call):
    message = call.message
    user = db.GetUserById(message.chat.id)
    if (user == None):
        bot_messages.NewSendMessage(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å.', markup_inline)
        return
    markup_inline = GetSettingsPageContent(call.message)
    messageToReply = GetSettingsMessageText(user)
    bot_messages.NewEditMessage(call.message.chat.id, call.message.message_id, messageToReply, markup_inline)
    
@bot.message_handler(commands = ['settings', 'params', 'param', ' settings', ' params', ' param',])
def SettingsCommand(message):
    markup_inline = GetSettingsPageContent(message)
    user = db.GetUserById(message.chat.id)
    if (user == None):
        bot_messages.NewSendMessage(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å.', markup_inline)
        return
    
    messageToReply = GetSettingsMessageText(user)
    bot_messages.NewSendMessage(message.chat.id, messageToReply, markup_inline)

def GetSettingsMessageText(user : User):
    if (user == None):
        return '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å.'
    
    if (user.IsTeacher()): 
        roleName = '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'
        if (user.UserValidAsTeacher()):
            selectedRoleName = db.GetTeacherNameById(user.TeacherID())
        else:
            selectedRoleName = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        prefixRole = '–§–ò–û'
        extraMessage = "–≤–∞—à–µ –§–ò–û"
    else: 
        roleName = '—Å—Ç—É–¥–µ–Ω—Ç'
        if (user.UserValidAsStudent()):
            selectedRoleName = db.getGroupNameById(user.GroupID())
        else:
            selectedRoleName = '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        prefixRole = '–ì—Ä—É–ø–ø–∞'
        extraMessage = "–≤–∞—à—É –≥—Ä—É–ø–ø—É"
        
    if (user.SpamStatus()): spamStatus = "–≤–∫–ª—é—á–µ–Ω–æ" 
    else: spamStatus = "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        
    messageToReply = 'üßë‚Äçüíª–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n\n'
    messageToReply += f'–†–æ–ª—å: {roleName}\n'
    messageToReply += f'{prefixRole}: {selectedRoleName}\n'
    messageToReply += f'–ê–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {spamStatus}\n'
    if(not user.UserValidAuto()):
        messageToReply += f'\n<strong>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ {extraMessage}!</strong>\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.'
    return messageToReply
    
@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data, 'm_timetable'))
def handle_button_pressed(call):
    goToRaspisanie(call.message, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')

def c_group_callback_context(message, callback):
    callbackBack = HistoryPrevPage(callback)
    user = db.GetUserById(message.chat.id)
    item0 = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=callbackBack)
    item1 = types.InlineKeyboardButton(text = '–ü–µ—Ä–≤—ã–π –∫—É—Ä—Å', callback_data=HistoryGenerate(callback, 'f_course0'))
    item2 = types.InlineKeyboardButton(text = '–í—Ç–æ—Ä–æ–π –∫—É—Ä—Å', callback_data=HistoryGenerate(callback, 'f_course1'))
    item3 = types.InlineKeyboardButton(text = '–¢—Ä–µ—Ç–∏–π –∫—É—Ä—Å', callback_data=HistoryGenerate(callback, 'f_course2'))
    item4 = types.InlineKeyboardButton(text = '–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∫—É—Ä—Å', callback_data=HistoryGenerate(callback, 'f_course3'))
    
    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(item0)
    markup_inline.add(item1, item2)
    markup_inline.add(item3, item4)
    
    if (user.UserValidAuto()):
        item6 = types.InlineKeyboardButton(text = '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', callback_data=HistoryGenerateWithReset('m_timetable'))
        markup_inline.add(item6)
    
    if (user == None or user.GroupID() == None or user.GroupID() == 0):
        messageToReply = "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å:"
    else:
        messageToReply = f'–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {db.getGroupNameById(user.GroupID())}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å:'
    return messageToReply, markup_inline

@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data, 'c_group'))
def handle_button_pressed(call):
    message = call.message
    messageToReply, markup_inline = c_group_callback_context(message, call.data)
    bot_messages.NewEditMessage(message.chat.id, message.message_id, messageToReply, markup_inline)
    
def c_name_callback_context(message, callback):
    user = db.GetUserById(message.chat.id)
    callbackBack = HistoryPrevPage(callback)
    item0 = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=callbackBack)
    item1 = types.InlineKeyboardButton(text = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫', callback_data=HistoryGenerate(callback, 'f_name'))
    item2 = types.InlineKeyboardButton(text = '–ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏', callback_data=HistoryGenerate(callback, 'f_nlist0'))
    
    
    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(item0)
    markup_inline.add(item1, item2)
    
    messageToReply = f'''–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –§–ò–û: {db.GetTeacherNameById(user.TeacherID())}
    
–ï—Å–ª–∏ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è <em>"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º"</em>. 

–í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <em>"–ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏"</em>, –æ–Ω –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–ø–∏—Å–∫—É —Ñ–∞–º–∏–ª–∏–π –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
'''
    return messageToReply, markup_inline 
        

@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data, 'c_name'))
def handle_button_pressed(call):
    message = call.message
    messageToReply, markup_inline = c_name_callback_context(message, call.data)
    bot_messages.NewEditMessage(message.chat.id, message.message_id, messageToReply, markup_inline)

def sendSpamContext(call):
    message = call.message
    callbackBack = HistoryPrevPage(call.data)
    
    markup_inline = types.InlineKeyboardMarkup()
    itemBack = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=callbackBack)
    markup_inline.add(itemBack)
    
    messageToReply = '–ê–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'

    user = db.GetUserById(message.chat.id)
    if (user == None):
        messageToReply = "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å."
        bot_messages.NewEditMessage(message.chat.id, message.message_id, messageToReply, markup_inline)
        return 
    
    
    if (user.SpamStatus()):
        messageToReply = "‚úÖ –ê–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ." 
        item1 = types.InlineKeyboardButton(text = '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å', callback_data=HistoryReplaceLastPage(call.data, f"s_spam0"))
        markup_inline.add(item1)
    else:
        messageToReply = "‚ùå –ê–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ."
        item1 = types.InlineKeyboardButton(text = '‚úÖ –í–∫–ª—é—á–∏—Ç—å', callback_data=HistoryReplaceLastPage(call.data, f"s_spam1"))
        markup_inline.add(item1)
    
    bot_messages.NewEditMessage(message.chat.id, message.message_id, messageToReply, markup_inline)

@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data,'c_spam'))
def handle_button_pressed(call):
    sendSpamContext(call)

@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data,'s_spam'))
def handle_button_pressed(call):
    message = call.message
    
    currentPage = HistoryCurrentPage(call.data)
    strLen = len(currentPage) - 1
    setSpam = int(currentPage[strLen:])
    
    user = db.GetUserById(message.chat.id)
    
    if (user != None):
        username = db.GetUsernameByMessage(message)
        db.AddToDb(user.UserID(), username, None, setSpam, None, None)
            
    sendSpamContext(call)



        
def getCourseYearDelta(courseId):
    isStudYearOver = datetime.now(pytz.timezone('Asia/Yekaterinburg')).month >= 7
    thisYear = datetime.now(pytz.timezone('Asia/Yekaterinburg')).year - courseId
    if (not isStudYearOver): thisYear -= 1
    return str(thisYear)[2:]

def createGroupSelectionButtons(courseId, call):
    dirNames = np.array(db.getGroupsDirName(courseId))
    
    markup_inline = types.InlineKeyboardMarkup()
    
    item_back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=HistoryPrevPage(call.data))
    markup_inline.add(item_back)
    i = 0
    while(i < len(dirNames)):
        #groupId = db.groupchecker(f'{courseId}{dirNames[i]}')
        item1 = types.InlineKeyboardButton(text = dirNames[i], callback_data=HistoryGenerate(call.data, f'f_group_{courseId}{dirNames[i]}'))
        i += 1
        if (i == len(dirNames)):
            markup_inline.add(item1)
            continue
        
        item2 = types.InlineKeyboardButton(text = dirNames[i], callback_data= HistoryGenerate(call.data, f'f_group_{courseId}{dirNames[i]}'))
        i += 1
        if(i == len(dirNames)):
            markup_inline.add(item1, item2)
            continue
        
        item3 = types.InlineKeyboardButton(text = dirNames[i], callback_data= HistoryGenerate(call.data, f'f_group_{courseId}{dirNames[i]}'))
        markup_inline.add(item1, item2, item3)
        i += 1
        
    itemNotFound = types.InlineKeyboardButton(text = '–ó–¥–µ—Å—å –Ω–µ—Ç –º–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', callback_data=HistoryGenerate(call.data, f'e_gr'))
    markup_inline.add(itemNotFound)
    return markup_inline
    
def shortcutGroupSelection(message, courseId):
    messageToReply = f"–í–∞—à –∫—É—Ä—Å - {courseId + 1}, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å."
    courseId = getCourseYearDelta(courseId)
    markup_inline = createGroupSelectionButtons(courseId) # ERROR
    bot_messages.NewEditMessage(message.chat.id, message.message_id, messageToReply, markup_inline)

@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data,'f_course'))
def handle_button_pressed(call):
    currentPage = HistoryCurrentPage(call.data)
    strLen = len(btnCallbackPrefix) + len('f_course')
    courseName = currentPage[strLen:]
    courseNum = int(courseName)
    message = call.message
    messageToReply = f"–í–∞—à –∫—É—Ä—Å - {courseNum + 1}, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å."
    courseNum = getCourseYearDelta(courseNum)
    markup_inline = createGroupSelectionButtons(courseNum, call)
    bot_messages.NewEditMessage(message.chat.id, message.message_id, messageToReply, markup_inline)
    
@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data, 'e_gr'))
def handle_button_pressed(call):
    markup_inline = types.InlineKeyboardMarkup()
    callbackBack = HistoryPrevPage(call.data)
    itemBack = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=callbackBack)
    markup_inline.add(itemBack)
    
    messageToReply = '–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã –≤—Å–µ –µ—â–µ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href="https://vk.com/ptpitras" target="_blank">—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏</a>.'
    bot_messages.NewEditMessage(call.message.chat.id, call.message.message_id, messageToReply, markup_inline)


def searchForGroup(call):
    callbackLen = len('f_group_')
    courseId = call.data[callbackLen: callbackLen + 2]
    selectedGroup = call.data[callbackLen + 2:]
    
    callbackBack = HistoryPrevPage(call.data)
    markup_inline = types.InlineKeyboardMarkup()
    itemBack = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=callbackBack)
    markup_inline.add(itemBack)
    allGroups = np.array(db.getGroupListFilterByYear(courseId, selectedGroup)) # 19, –°–ó–ò-1
    i = 0
    while(i < len(allGroups)):
        item1 = types.InlineKeyboardButton(text = allGroups[i], callback_data= HistoryGenerate(call.data, f's_group_{allGroups[i]}'))
        i += 1
        if (i == len(allGroups)):
            markup_inline.add(item1)
            continue
            
        item2 = types.InlineKeyboardButton(text = allGroups[i], callback_data= HistoryGenerate(call.data, f's_group_{allGroups[i]}'))
        markup_inline.add(item1, item2)
        i += 1
    itemNotFound = types.InlineKeyboardButton(text = '–ó–¥–µ—Å—å –Ω–µ—Ç –º–æ–µ–π –≥—Ä—É–ø–ø—ã', callback_data=HistoryGenerate(call.data, f'e_gr'))
    markup_inline.add(itemNotFound)
    
    messageToReply = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
    bot_messages.NewEditMessage(call.message.chat.id, call.message.message_id, messageToReply, markup_inline)
    
    
@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data,'f_group'))
def handle_button_pressed(call):
    message = call.message
    callbackLen = len(btnCallbackPrefix) + len('f_group_')
    currentCallback = HistoryCurrentPage(call.data)
    courseId = currentCallback[callbackLen: callbackLen + 2]
    selectedGroup = currentCallback[callbackLen + 2:]
    callbackBack = HistoryPrevPage(call.data)
    
    markup_inline = types.InlineKeyboardMarkup()
    itemBack = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=callbackBack)
    markup_inline.add(itemBack)
    allGroups = np.array(db.getGroupListFilterByYear(courseId, selectedGroup)) # 19, –°–ó–ò-1
    i = 0
    while(i < len(allGroups)):
        item1 = types.InlineKeyboardButton(text = allGroups[i], callback_data=HistoryGenerateWithReset(f's_groups_{db.getGroupIdByName(allGroups[i])}'))
        i += 1
        if (i != len(allGroups)):
            item2 = types.InlineKeyboardButton(text = allGroups[i], callback_data=HistoryGenerateWithReset(f's_groups_{db.getGroupIdByName(allGroups[i])}'))
            markup_inline.add(item1, item2)
        else:
            markup_inline.add(item1)
        i += 1
    itemNotFound = types.InlineKeyboardButton(text = '–ó–¥–µ—Å—å –Ω–µ—Ç –º–æ–µ–π –≥—Ä—É–ø–ø—ã', callback_data=HistoryGenerate(call.data, f'e_gr'))
    markup_inline.add(itemNotFound)
    
    messageToReply = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
    bot_messages.NewEditMessage(message.chat.id, message.message_id, messageToReply, markup_inline)
    
@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data,'f_name'))
def handle_button_pressed(call):
    message = call.message
    callbackBack = HistoryPrevPage(call.data)
    
    userLastName = message.chat.last_name
    teacherList = db.GetTeacherNamesList()
    
    filteredList = list()
    if (userLastName != None and len(str(userLastName)) > 4):
        for item in teacherList:
            if (userLastName.lower() in item.lower()):
                filteredList.append(item)
    isFound = len(filteredList) > 0
    # isFound = userLastName != None and str(userLastName) in teacherList
    
    markup_inline = types.InlineKeyboardMarkup()
    itemBack = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=callbackBack)
    markup_inline.add(itemBack)
        
    # allGroups = np.array(db.getGroupListFilterByYear(courseId, selectedGroup))
    if (isFound):
        i = 0
        while(i < len(filteredList)):
            abd = db.GetTeacherIdByLastname(filteredList[i])
            dd = db.GetTeacherNameById(abd)
            item1 = types.InlineKeyboardButton(text = filteredList[i], callback_data=HistoryGenerateWithReset(f's_name_{abd}'))
            i += 1
            if (i != len(filteredList)):
                item2 = types.InlineKeyboardButton(text = filteredList[i], callback_data=HistoryGenerateWithReset(f's_name_{db.GetTeacherIdByLastname(filteredList[i])}'))
                markup_inline.add(item1, item2)
            else:
                markup_inline.add(item1)
            i += 1
    
    item2 = types.InlineKeyboardButton(text = '–ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏', callback_data=HistoryGenerate(call.data, 'f_nlist0'))
    if (isFound):
        messageToReply = "–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ –∑–¥–µ—Å—å –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <em>\"–ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏\"</em>."
        markup_inline.add(item2)
    else:
        messageToReply = '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –≤ Telegram –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <em>"–ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏"</em>.'
    
        item1 = types.InlineKeyboardButton(text = '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫', callback_data=callbackBack)
        markup_inline.add(item1, item2)
    
    
    bot_messages.NewEditMessage(message.chat.id, message.message_id, messageToReply, markup_inline)
    
@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data,'f_nlist'))
def handle_button_pressed(call):
    message = call.message
    callbackBack = HistoryPrevPage(call.data)
    
    currentPage = HistoryCurrentPage(call.data)
    strLen = len(currentPage) - 1
    pageName = currentPage[strLen:]
    pageNum = int(pageName)
    
    teacherList = db.GetTeacherNamesList()
    
    markup_inline = types.InlineKeyboardMarkup()
    itemBack = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=callbackBack)
    markup_inline.add(itemBack)
    
    itemLimit = 20
    startIndex = pageNum * itemLimit
    maxPages = int(len(teacherList) / itemLimit) + 1
    
    i = startIndex
    try:
        limit = min(startIndex + itemLimit, len(teacherList))
        while(i < limit):
            item1 = types.InlineKeyboardButton(text = teacherList[i], callback_data=HistoryGenerateWithReset(f's_name_{db.GetTeacherIdByLastname(teacherList[i])}'))
            i += 1
            if (i != limit):
                item2 = types.InlineKeyboardButton(text = teacherList[i], callback_data=HistoryGenerateWithReset(f's_name_{db.GetTeacherIdByLastname(teacherList[i])}'))
                markup_inline.add(item1, item2)
            else:
                markup_inline.add(item1)
            i += 1
    except Exception as e: PrintEx(e) 
    
    messageToReply = '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å.'
    
    noPageAv = '----  X  ----'
    prevText = f'{max(1, pageNum)}        <-'
    pageText = f'[{pageNum + 1} / {maxPages}]'
    nextText = f'->        {min(maxPages, pageNum + 2)}'
    
    callbackEmpty = 'bebraaoaoaoaoao'
    callbackPrev = HistoryReplaceLastPage(call.data, f'f_nlist{max(0, pageNum - 1)}')
    callbackNext = HistoryReplaceLastPage(call.data, f'f_nlist{pageNum + 1}')
    
    if (pageNum == 0): 
        prevText = noPageAv
        callbackPrev = callbackEmpty
    if (pageNum == maxPages - 1): 
        nextText = noPageAv
        callbackNext = callbackEmpty
    
    item1 = types.InlineKeyboardButton(text = prevText, callback_data=callbackPrev)
    item2 = types.InlineKeyboardButton(text = pageText, callback_data=callbackEmpty)
    item3 = types.InlineKeyboardButton(text = nextText, callback_data=callbackNext)
    markup_inline.add(item1, item2, item3)
    #markup_inline.add(item1, item3)
    
    bot_messages.NewEditMessage(message.chat.id, message.message_id, messageToReply, markup_inline)

@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data, 's_name'))
def handle_button_pressed(call):
    message = call.message
    callbackLen = len(btnCallbackPrefix) + len('s_name')
    teacherId = call.data[callbackLen + 1: ]
    
    markup_inline = types.InlineKeyboardMarkup()

    itemBack = types.InlineKeyboardButton(text = '–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä', callback_data=HistoryGenerate(call.data, 'c_name'))
    itemRetry= types.InlineKeyboardButton(text = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data=HistoryGenerateWithReset('m_settings'))

    markup_inline.add(itemBack)
    markup_inline.add(itemRetry)
    
    userId = message.chat.id
    username = db.GetUsernameByMessage(message)
    user = db.GetUserById(userId)
    if (teacherId == None or int(teacherId) < 1): return False
    if (db.AddToDb(userId, username, None, 1, 1, teacherId) == False):
        messageToReply = "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    else:
        messageToReply = bot_messages.getTeacherSelectedMessage(teacherId, user.SpamStatus())
    
    if (user.UserValidAsTeacher()):
        item4 = types.InlineKeyboardButton(text = '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', callback_data=HistoryGenerateWithReset('m_timetable'))
        markup_inline.add(item4)
    
    bot_messages.NewEditMessage(message.chat.id, message.message_id, messageToReply, markup_inline)


@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data, 's_groups'))
def handle_button_pressed(call):
    message = call.message
    callbackLen = len(btnCallbackPrefix) + len('s_groups')
    groupId = call.data[callbackLen + 1: ]
    print(db.udb.Execute(f"SELECT * FROM {db.udb.tableName}")) 
    if (groupId == None or len(groupId) <= 1): return False
    
    
    callbackBack = HistoryPrevPage(call.data)
    userId = message.chat.id
    user = db.GetUserById(message.chat.id)
    username = db.GetUsernameByMessage(message)
    if (db.AddToDb(userId, username, groupId, 1, 0, None) == False):
        markup_inline = types.InlineKeyboardMarkup()
        itemBack = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=callbackBack)
        markup_inline.add(itemBack)
        #markup_inline.add(itemRetry)
        messageToReply = "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        bot_messages.NewEditMessage(call.message.chat.id, call.message.message_id, messageToReply, markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        itemBack = types.InlineKeyboardButton(text = '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É', callback_data=HistoryGenerate(call.data, 'c_group'))
        itemRetry= types.InlineKeyboardButton(text = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data=HistoryGenerateWithReset('m_settings'))
        markup_inline.add(itemBack)
        markup_inline.add(itemRetry)
        if (user.UserValidAuto()):
            item4 = types.InlineKeyboardButton(text = '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', callback_data=HistoryGenerateWithReset('m_timetable'))
            markup_inline.add(item4)

        groupFullName = db.getGroupNameById(groupId)
        messageToReply = getGroupSelectedMessage(groupFullName, user.SpamStatus())
        bot_messages.NewEditMessage(call.message.chat.id, call.message.message_id, messageToReply, markup_inline)


#///////////////////////////////////////////////
def sendRoleContext(call):
    message = call.message
    callbackBack = HistoryPrevPage(call.data)
    
    markup_inline = types.InlineKeyboardMarkup()
    itemBack = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data=callbackBack)
    markup_inline.add(itemBack)
    
    user = db.GetUserById(message.chat.id)
    if (user == None):
        username = db.GetUsernameByMessage(message)
        if (db.AddToDb(message.chat.id, username, None, 1, 0, None) == False):
            messageToReply = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
            bot_messages.NewEditMessage(call.message.chat.id, call.message.message_id, messageToReply)
            return
    
    user = db.GetUserById(message.chat.id)
    if (user != None):
        if (user.IsTeacher()):
            messageToReply = "–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å." 
            item1 = types.InlineKeyboardButton(text = '–°—Ç–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º', callback_data=HistoryReplaceLastPage(call.data, f"s_role0"))
            markup_inline.add(item1)
        else:
            messageToReply = "–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: —Å—Ç—É–¥–µ–Ω—Ç."
            item1 = types.InlineKeyboardButton(text = '–°—Ç–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º', callback_data=HistoryReplaceLastPage(call.data, f"s_role1"))
            markup_inline.add(item1)
    else:
        messageToReply = "–ü–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ, –≤–∞—Å –Ω–µ —É–¥–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ - '/start'."
    
    bot_messages.NewEditMessage(message.chat.id, message.message_id, messageToReply, markup_inline)

@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data,'c_role'))
def handle_button_pressed(call):
    sendRoleContext(call)

@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data,'s_role'))
def handle_button_pressed(call):
    message = call.message
    
    currentPage = HistoryCurrentPage(call.data)
    strLen = len(currentPage) - 1
    setRole = int(currentPage[strLen:])
    
    user = db.GetUserById(message.chat.id)
    
    if (user != None):
        username = db.GetUsernameByMessage(message)
        db.AddToDb(message.chat.id, username, None, None, setRole, None)
            
    sendRoleContext(call)

@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data,'m_register'))
def handle_button_pressed(call):
    message = call.message
    
    currentPage = HistoryCurrentPage(call.data)
    strLen = len(currentPage) - 1
    setRole = int(currentPage[strLen:])
    
    username = db.GetUsernameByMessage(message)
    if (db.AddToDb(message.chat.id, username, None, 1, setRole, None) == False):
        messageToReply = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
        bot_messages.NewEditMessage(call.message.chat.id, call.message.message_id, messageToReply)
        return
    markup_inline = GetSettingsPageContent(call.message)
    messageToReply = GetSettingsMessageText(db.GetUserById(call.message.chat.id))
    bot_messages.NewEditMessage(call.message.chat.id, call.message.message_id, messageToReply, markup_inline)

@bot.message_handler(commands = ['start'])
def StartCommand(message):
    # user = db.GetUserById(message.chat.id)
    # if (user == None or True):
    # messageToReply = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:"
    markup_inline = types.InlineKeyboardMarkup()
    callHistory = 'm_settings'
    
    extraMsg = ""
    if (db.GetUserById(message.chat.id) == None):
        username = db.GetUsernameByMessage(message)
        if (db.AddToDb(message.chat.id, username, 0, 0, 0, 0) == False):
            extraMsg = "\n\n–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    
    item1 = types.InlineKeyboardButton(text = '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', callback_data=HistoryGenerate(callHistory, 'm_register1'))
    item2 = types.InlineKeyboardButton(text = '–°—Ç—É–¥–µ–Ω—Ç', callback_data=HistoryGenerate(callHistory, 'm_register0'))
    
    markup_inline.add(item1, item2)
    bot_messages.NewSendMessage(message.chat.id, f'{bot_messages.startMessage}{extraMsg}', markup_inline)
    # return
    
    # messageToReply = 'start'
    # bot_messages.NewSendMessage(message.chat.id, messageToReply)

def ThStartCommand(message):
    if ("–Ω–∞—á–∞—Ç—å" in message.text.lower() or "—Å—Ç–∞—Ä—Ç" in message.text.lower() or "start" in message.text.lower()):
        StartCommand(message) 

@bot.message_handler(commands = ['me'])
def GetMeCommand(message):
    if (db.IsUserTester(message.chat.id) == False):
        return
    
    user = db.GetUserById(message.chat.id)
    if (user == None):
        return
        
    messageToReply = f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {str(user.Name())}
ID : {user.UserID()}

–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: {user.GroupID()}
–†–∞—Å—Å—ã–ª–∫–∞: {user.SpamStatus()}
–†–æ–ª—å —É—á–∏—Ç–µ–ª—è: {user.IsTeacher()}
–ù–æ–º–µ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {user.TeacherID()}

/stats - –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'''
    bot_messages.NewSendMessage(message.chat.id, messageToReply)

@bot.message_handler(commands = ['time'])
def GetMeCommand(message):
    pairlist = pm.GetPairTimeList(date.today())
    messageToReply = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    for i in range(len(pairlist)):
        messageToReply += f"[{i}] {pairlist[i].GetFormat()}\n"
    bot_messages.NewSendMessage(message.chat.id, messageToReply)

@bot.message_handler(commands = ['stats'])
def GetStatsCommand(message):
    if (db.IsUserTester(message.chat.id) == False):
        return
    
    user = db.GetUserById(message.chat.id)
    if (user == None):
        return

    total = len(db.udb.Execute(f"SELECT * FROM {db.udb.tableName}"))
    enabled = len(db.udb.Execute(f"SELECT * FROM {db.udb.tableName} WHERE spam_status = 1"))
    teachers = len(db.udb.Execute(f"SELECT * FROM {db.udb.tableName} WHERE is_teacher = 1"))
    
    messageToReply = f'''–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {db.todaySended}
–ü–∏—Å–∞–ª–∏ –±–æ—Ç—É —Å–µ–≥–æ–¥–Ω—è: {db.ulActiveDay.GetLen()}
–ü–∏—Å–∞–ª–∏ –±–æ—Ç—É –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {db.ulActiveWeek.GetLen()}
–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª–∏–ª–∞—Å—å: {db.lastSpamDuration} –Ω–∞—á–∏–Ω–∞—è —Å {db.lastSpamTime}

–í—Å–µ–≥–æ {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–í–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —É {enabled}
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π {teachers}

–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {db.ulBlocked.GetLen()}
/me - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ'''
    bot_messages.NewSendMessage(message.chat.id, messageToReply)
    
@bot.message_handler(commands = ['reset'])
def ResetCommand(message):
    if (db.IsUserTester(message.chat.id) == False):
        return
    
    if(not config.IsBotInDebug()):
        bot_messages.NewSendMessage(message.chat.id, '–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–ª–∞–¥–∫–µ.')
        return
    
    user = db.GetUserById(message.chat.id)
    if (user == None):
        return
    
    db.AddToDb(message.chat.id, None, 0, 0, 0, 0)
    bot_messages.NewSendMessage(message.chat.id, '–ü—Ä–æ—Ñ–∏–ª—å —Å–±—Ä–æ—à–µ–Ω.\n/me')

def GetUserInfo(message):
    messageToReply = "–í—ã –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ."
    user = db.GetUserById(message.chat.id)
    if (user == None):
        return messageToReply
    messageToReply = f"üë§–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.Name()}"
    messageToReply += f" [id {db.GetUidByChatId(message.chat.id)}]"
    
    if (user.IsStudent()):
        messageToReply += f"\nüïµÔ∏è‚Äç‚ôÄÔ∏è–†–æ–ª—å: —Å—Ç—É–¥–µ–Ω—Ç"
        messageToReply += f"\nüë∑–ì—Ä—É–ø–ø–∞ {db.getGroupNameById(user.GroupID())}"
    else:
        messageToReply += f"\nüïµÔ∏è‚Äç‚ôÄÔ∏è–†–æ–ª—å: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        messageToReply += f"\nüßë‚Äçüíª–§–ò–û {db.GetTeacherNameById(user.TeacherID())}"
    
    if (user.SpamStatus()):
        messageToReply += "\n‚úÖ–ê–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n" 
    else:
        messageToReply += "\n‚ùå–ê–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ\n"
        
    enabled = len(db.udb.Execute(f"SELECT * FROM {db.udb.tableName} WHERE spam_status = 1"))
    total = len(db.udb.Execute(f"SELECT * FROM {db.udb.tableName}"))

    messageToReply += f"\nüêù–í—Å–µ–≥–æ {str(total)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å —Ä–∞—Å—Å—ã–ª–∫–æ–π {str(enabled)})\n"
    return messageToReply

@bot.callback_query_handler(func=lambda call: HistoryIsInTop(call.data,'m_profile'))
def handle_button_pressed(call):
    message = call.message
    messageToReply = GetUserInfo(message)
    bot_messages.NewEditMessage(message.chat.id, call.message.message_id, messageToReply)

@bot.message_handler(commands = ['user', 'info', 'account', 'profile'])
def SendUserInfo(message):
    messageToReply = GetUserInfo(message)
    bot_messages.NewSendMessage(message.chat.id, messageToReply)

@bot.message_handler(commands = ['—Å–µ–≥–æ–¥–Ω—è', ' —Å–µ–≥–æ–¥–Ω—è', 'td', 'today'])
def SendToday(message):
    if (not db.GetUserById(message.chat.id).UserValidAuto()):
        bot_messages.NewSendMessage(message.chat.id, bot_messages.needToRegister)
        return
    messageToReply = pm.GetByDate(date.today(), message.chat.id, True)
    bot_messages.NewSendMessage(message.chat.id, messageToReply)

@bot.message_handler(commands = ['–∑–∞–≤—Ç—Ä–∞', ' –∑–∞–≤—Ç—Ä–∞', 'tm', 'tomorrow'])
def SendTomorrow(message):
    if (not db.GetUserById(message.chat.id).UserValidAuto()):
        bot_messages.NewSendMessage(message.chat.id, bot_messages.needToRegister)
        return
    
    messageToReply = pm.GetByDate((date.today() + timedelta(days=1)), message.chat.id, False)
    if (len(messageToReply) > 30):
        messageToReply = f"–ó–∞–≤—Ç—Ä–∞:\n{messageToReply}"
    bot_messages.NewSendMessage(message.chat.id, messageToReply)

@bot.message_handler(commands = ['–≤—á–µ—Ä–∞', ' –≤—á–µ—Ä–∞', 'yd', 'yesterday'])
def SendYesterday(message):
    
    if (not db.GetUserById(message.chat.id).UserValidAuto()):
        bot_messages.NewSendMessage(message.chat.id, bot_messages.needToRegister)
        return
    
    messageToReply = pm.GetByDate((date.today() - timedelta(days=1)), message.chat.id, False)
    if (len(messageToReply) > 30):
        messageToReply = f"–í—á–µ—Ä–∞:\n{messageToReply}"
    bot_messages.NewSendMessage(message.chat.id, messageToReply)

@bot.message_handler(commands = ['help', 'menu', '–ø–æ–º–æ—â—å', '–º–µ–Ω—é'])
def HelpCommand(message):
    markup_inline = types.InlineKeyboardMarkup()
    
    item0 = types.InlineKeyboardButton(text = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data=HistoryGenerateWithReset('m_settings'))
    item1 = types.InlineKeyboardButton(text = '–ü—Ä–æ—Ñ–∏–ª—å', callback_data=HistoryGenerateWithReset('m_profile'))
    markup_inline.add(item0, item1)
        
    bot_messages.NewSendMessage(message.chat.id, bot_messages.helpMessage, markup_inline)

@bot.message_handler(commands = ['group'])
def ChangeGroupCommand(message):
    # textCommand = message.text.lower().split(' ', 1)
    # if (len(textCommand) > 1):
    #     textCommand = textCommand[1]
    # else: textCommand = None
    messageToReply, markup_inline = c_group_callback_context(message, HistoryGenerateWithReset('m_settings'))
    bot_messages.NewSendMessage(message.chat.id, messageToReply, markup_inline)

@bot.message_handler(commands = ['name', 'teacher'])
def ChangeNameCommand(message):
    # textCommand = message.text.lower().split(' ', 1)
    # if (len(textCommand) > 1):
    #     textCommand = textCommand[1]
    # else: textCommand = None
    messageToReply, markup_inline = c_name_callback_context(message, HistoryGenerateWithReset('m_settings'))
    bot_messages.NewSendMessage(message.chat.id, messageToReply, markup_inline)

#c_role
#c_spam

def ThHelpCommand(message):
    if ("–ø–æ–º–æ" in message.text.lower() or "–≥–ª–∞–≤" in message.text.lower()):
        HelpCommand(message)

def ThViolentWords(message):
    for word in np.array(config.ViolentWords):
        if word in message.text.lower():
            try:
                bot.send_sticker(message.chat.id, config.SwearStr[randrange(3)])
            except telebot.apihelper.ApiException as e:
                pass

def ThOtherCommands(message):
    if(handleDayTextAnswer(message)): 
        return
    
    if ("—Ä–∞—Å–ø–∏—Å" in message.text.lower()):
        goToRaspisanie(message, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ") 
        return
    
    if("–¥–∞–ª" in message.text.lower() or "—Å–ª–µ–¥" in message.text.lower() or "–∫—É–¥" in message.text.lower()):
        if (bot_messages.SendTimeTable(message.chat.id, True) == False):
            bot_messages.NewSendMessage(message.chat.id, "–ü–∞—Ä –Ω–µ—Ç, –æ—Ç–¥—ã—Ö–∞–µ–º. üòé")
        return 
    
    # TODO: –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ /now, /next, /best
    # if("—Å–µ–π" in message.text.lower()):
    #     if (bot_messages.SendTimeTable(message.chat.id, False) == False):
    #         bot_messages.NewSendMessage(message.chat.id, "–ü–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    #     return

@bot.message_handler(content_types = ['text'])
def TextAnswer(message):
    try:
        print(f'Get message from {db.GetUsernameByMessage(message)}')
    except: pass
    
    ThStartCommand(message) 
    ThHelpCommand(message)
    ThViolentWords(message)  
    ThOtherCommands(message)
    
def raspisanieButtons():
    markup_inline = types.ReplyKeyboardMarkup(resize_keyboard=True)
    itemTd = types.KeyboardButton(text = '–°–µ–≥–æ–¥–Ω—è')
    itemTm = types.KeyboardButton(text = '–ó–∞–≤—Ç—Ä–∞')
    item1 = types.KeyboardButton(text = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    item2 = types.KeyboardButton(text = '–í—Ç–æ—Ä–Ω–∏–∫')
    item3 = types.KeyboardButton(text = '–°—Ä–µ–¥–∞')
    item4 = types.KeyboardButton(text = '–ß–µ—Ç–≤–µ—Ä–≥')
    item5 = types.KeyboardButton(text = '–ü—è—Ç–Ω–∏—Ü–∞')
    item6 = types.KeyboardButton(text = '–°—É–±–±–æ—Ç–∞')
    itemHelp = types.KeyboardButton(text = '–ü–æ–º–æ—â—å')
    itemNext = types.KeyboardButton(text = '–ö—É–¥–∞ –∏–¥—Ç–∏?')

    markup_inline.add(itemTd, itemTm)
    markup_inline.add(item1, item2, item3)
    markup_inline.add(item4, item5, item6)
    markup_inline.add(itemHelp, itemNext)
    return markup_inline

# –ö–†–ê–§–¢ –ö–ù–û–ü–û–ö –ù–ê –ù–ï–î–ï–õ–Æ
def goToRaspisanie(message, msgText):
    if (db.GetUserById(message.chat.id) == None):
        return
    markup_inline = raspisanieButtons()
    messageToReply = msgText
    bot_messages.NewSendMessage(message.chat.id, messageToReply, markup_inline)

# –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –î–ï–ù–¨
def handleDayTextAnswer(message):

    if ("—Å–µ–≥–æ–¥–Ω—è" in message.text.lower()):
        SendToday(message)
        return True
    elif ("–∑–∞–≤—Ç—Ä–∞" in message.text.lower()):
        SendTomorrow(message)
        return True
    elif ("–≤—á–µ—Ä–∞" in message.text.lower()):
        SendYesterday(message)
        return True
    
    dArray = np.array(dayArray)
    lowerMsg = message.text.lower()

    for targetWeekDay in range(len(dArray)):
        if (dArray[targetWeekDay] not in lowerMsg): continue
        
        if (targetWeekDay == 6):    
            bot_messages.NewSendMessage(message.chat.id, "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ? üóø")
            return True
        
        todayWeekday = date.today().weekday()
        
        dayDelta = ((targetWeekDay + 7 - todayWeekday) % 7)
        
        if (dayDelta < 3):
            messageToReply = ["–°–µ–≥–æ–¥–Ω—è\n", "–ó–∞–≤—Ç—Ä–∞\n", "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\n"][dayDelta]
        else:
            messageToReply = f"–û—Å—Ç–∞–ª–æ—Å—å {dayDelta} {dayCompareArray[dayDelta-1]}\n"
        
        messageToReply += pm.GetByDate((date.today() + timedelta(days=dayDelta)), message.chat.id, False)
        bot_messages.NewSendMessage(message.chat.id, messageToReply)
        return True
    return False